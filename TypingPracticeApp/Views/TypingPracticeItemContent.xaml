<UserControl
    x:Class="TypingPracticeApp.Views.TypingPracticeItemContent"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:TypingPracticeApp.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:interactivity="clr-namespace:TypingPracticeApp.Interactivity"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:viewModels="clr-namespace:TypingPracticeApp.ViewModels"
    d:DataContext="{d:DesignInstance Type={x:Type viewModels:TypingPracticeItemContentViewModel},
                                     IsDesignTimeCreatable=True}"
    d:DesignHeight="515"
    d:DesignWidth="900"
    mc:Ignorable="d">

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <interactivity:InvokeCommandAction Command="{Binding ViewLoadedCommand}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Unloaded">
            <interactivity:InvokeCommandAction Command="{Binding ViewUnloadedCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <UserControl.Resources>
        <Style
            x:Key="TypingPracticeContentBorderStyle"
            BasedOn="{StaticResource TypingContentBorderStyle}"
            TargetType="{x:Type Border}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsKeyMissing.Value}" Value="True">
                    <Setter Property="Background" Value="{DynamicResource AppMissingNoticeBrush}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="195*" />
            <RowDefinition Height="300*" />
            <RowDefinition Height="140*" />
        </Grid.RowDefinitions>

        <materialDesign:ColorZone
            Grid.Row="0"
            Margin="0,0,0,15"
            materialDesign:ShadowAssist.ShadowDepth="Depth3"
            CornerRadius="3"
            Mode="Standard">
            <Border Style="{StaticResource TypingPracticeContentBorderStyle}">
                <StackPanel VerticalAlignment="Top" Orientation="Vertical">
                    <TextBlock Style="{StaticResource MaterialDesignDisplay1TextBlock}" Text="{Binding OdaiText.Value}" />
                    <TextBlock Style="{StaticResource MaterialDesignHeadlineTextBlock}" Text="{Binding YomiText.Value}" />
                    <ItemsControl ItemsSource="{Binding PracticeKeyInfoViewModels}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type viewModels:PracticeKeyInfoViewModel}">
                                <!--<Viewbox Height="50" Stretch="UniformToFill">-->
                                <TextBlock
                                    x:Name="InputKeyTextBlock"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Style="{StaticResource MaterialDesignDisplay1TextBlock}"
                                    Text="{Binding ExpectedKey.Value}" />
                                <!--</Viewbox>-->
                                <DataTemplate.Triggers>
                                    <!--<DataTrigger Binding="{Binding IsMatch.Value}" Value="True">
                                        <Setter TargetName="InputKeyTextBlock" Property="Foreground" Value="{DynamicResource AppAccentBrush}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsMatch.Value}" Value="False">
                                        <Setter TargetName="InputKeyTextBlock" Property="Foreground" Value="{DynamicResource AppErrorBrush}" />
                                    </DataTrigger>-->
                                    <!--<DataTrigger Binding="{Binding IsMatch.Value}" Value="{x:Null}">
                                            <Setter TargetName="InputKeyTextBlock" Property="Foreground" Value="Gray" />
                                        </DataTrigger>-->
                                    <DataTrigger Binding="{Binding IsCurrent.Value}" Value="true">
                                        <Setter TargetName="InputKeyTextBlock" Property="Foreground" Value="{DynamicResource AppAccentBrush}" />
                                    </DataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsCurrent.Value}" Value="True" />
                                            <Condition Binding="{Binding IsMatch.Value}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="InputKeyTextBlock" Property="Foreground" Value="{DynamicResource AppErrorBrush}" />
                                    </MultiDataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
            </Border>
        </materialDesign:ColorZone>
        <controls:TypingKeyboard
            Grid.Row="1"
            AccentKey="{Binding CurrentExpectedKey.Value, Mode=OneWay}"
            IsNotMatchedAccentKey="{Binding IsNotMatched.Value, Mode=OneWay}" />
        <controls:TypingHands
            Grid.Row="2"
            AccentKey="{Binding CurrentExpectedKey.Value, Mode=OneWay}"
            IsNotMatchedAccentKey="{Binding IsNotMatched.Value, Mode=OneWay}" />
    </Grid>
</UserControl>
